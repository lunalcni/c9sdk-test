{
  "name": "jsonm",
  "version": "1.0.6",
  "description": "json compressor for packing messages with memoization",
  "main": "jsonm.js",
  "scripts": {
    "test": "node_modules/mocha/bin/mocha .",
    "browserify": "mkdir -p build; node_modules/browserify/bin/cmd.js -s packer lib/packer.js -o build/packer.js && node_modules/browserify/bin/cmd.js -s unpacker lib/unpacker.js -o build/unpacker.js && node_modules/browserify/bin/cmd.js -s jsonm jsonm.js -o build/jsonm.js",
    "prepublish": "npm run browserify"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lennartcl/jsonm.git"
  },
  "author": {
    "name": "Lennart Kats",
    "email": "lennart add c9.io"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lennartcl/jsonm/issues"
  },
  "homepage": "https://github.com/lennartcl/jsonm#readme",
  "devDependencies": {
    "mocha": "^2.3.4",
    "assert": "^1.3.0",
    "browserify": "^12.0.1"
  },
  "readme": "jsonm\n=====\n\n_\"Listen very carefully, I shall say 'zis only once!\"_\n\njsonm is a performant, safe way to compress JSON messages,\nin similar vein to [jsonh](https://github.com/WebReflection/JSONH)\nand [jsonc](https://github.com/tcorral/JSONC). jsonm makes messages up\nto several orders of magnitude smaller by getting rid of repeated\nnames and values.\n\n## Examples\n\njson packs\n\n```\n[\n    { \"firstName\": \"Francis\", \"lastName\": \"Doe\" },\n    { \"firstName\": \"Anna\", \"lastName\": \"Smith\" },\n    { \"firstName\": \"Agent\", \"lastName\": \"Smith\", isAlias: true },\n    { \"firstName\": \"Anna\", \"lastName\": \"Francis\" }\n]\n```\n\ninto \n\n```\n[ 0,\n    [\"firstName\", \"lastName\", \"Francis\", \"Doe\"],\n    [3, 4, \"Anna\", \"Smith\"],\n    [3, 4, \"isAlias\", \"Agent\", 8, true],\n    [3, 4, 7, 5]\n]\n```\n\nNote how common substrings like `\"firstName\"`, `\"lastName\"`, and `\"John\"` are not\nrepeated but replaced by a dictionary index. jsonm also represents objects\nusing arrays to avoid quotation signs in pure JSON (e.g., `{\"3\":\"Anna\"}`)\n\nThe dictionary is built up on the fly and re-used for future messages sent.\nWhen sending the same message again it'll be even smaller:\n\n\n```\n[0,[3,4,5,6],[3,4,7,8],[3,4,9,10,8,11],[3,4,7,5],1]\n```\n\nMessages coming later also benefit from the dictionary:\n\n```\n[\n    { \"firstName\": \"Bryan\", \"lastName\": \"Fuller\" },\n    { \"firstName\": \"Anna\", \"lastName\": \"Adams\" },\n    { \"firstName\": \"Tim\", \"lastName\": \"Peterson\" },\n    { \"firstName\": \"Francis\", \"lastName\": \"Peterson\" }\n]\n```\n\nbecomes\n\n```\n[0,[3,4,\"Bryan\",\"Fuller\"],[3,4,7,\"Adams\"],[3,4,\"Tim\",\"Peterson\"],[3,4,5,16]]\n```\n\n## Installation\n\n```\n$ npm install --save jsonm\n```\n\n## Usage\n\njsonm is designed for sending messages between a sender and a receiver.\nThe sender packs messages and the receiver unpacks them.\n\n_Sender, packing a message:_\n\n```\nvar packer = new jsonm.Packer();\nvar packed = packer.pack(message);\n```\n\n_Receiver, unpacking a message:_\n\n```\nvar unpacker = new jsonm.Unpacker();\nunpacker.unpack(packed); // returns message\n```\n\nNote that both the packer and unpacker maintain a stateful dictionary.\nDon't lose them! But when the connection ends just start over with a new\npacker and unpacker.\n\n### Working with Strings\n\njsonm provides `packString()` for dealing with messages in string form.\n\n`packString()` can be used to efficiently pack multi-line strings. For\nexample, a string `\"foo\\nbar\"` is packed as if `[\"foo\", \"bar\"]` was packed:\n\n```\nvar packed = packer.packString(\"foo\\nbar\");\nunpacker.unpack(packed); // returns \"foo\\nbar\"\n```\n\n`packString()` can also efficiently pack JSON objects in string format,\ninternally parsing and stringifying them:\n\n```\nvar packed = packer.packString('{\"foo\":\"bar\"}');\nunpacker.unpack(packed); // returns '{\"foo\":\"bar\"}'\n```\n\n## Related Projects\n\n- JSONH: https://github.com/WebReflection/JSONH\n- JSONC: https://github.com/tcorral/JSONC\n\nThese projects pack uniform JavaScript objects, eliminating the\nneed for repeating the keys of each object. As an example, JSONH can pack\n\n\n```\n[\n    { \"firstName\": \"John\", \"lastName\": \"Doe\", isAlias: false },\n    { \"firstName\": \"Anna\", \"lastName\": \"Smith\", isAlias: false },\n    { \"firstName\": \"Agent\", \"lastName\": \"Smith\", isAlias: true }\n]\n```\n\ninto\n\n```\n[3,\"firstName\",\"lastName\",\"isAlias\",\"John\",\"Doe\",false,\"Anna\",\"Smith\",false,\"Agent\",\"Smith\",true]\n```\n\nJSONH and JSONM don't apply memoization and only help with uniform data.\nUnlike jsom, however, they are stateless, which can make it easier to use\nthem in some cases.\n",
  "readmeFilename": "README.md",
  "_id": "jsonm@1.0.6",
  "dist": {
    "shasum": "f6c7e6791b8f50a156022e02ff268ced1181d400"
  },
  "_from": "jsonm@1.0.6",
  "_resolved": "https://registry.npmjs.org/jsonm/-/jsonm-1.0.6.tgz"
}
